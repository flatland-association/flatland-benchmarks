import ansiStyles from 'ansi-styles'
import { SqlService } from '../services/sql-service.mjs'

export class Schema {
  static sql: SqlService

  /**
   * Sets up database schema.
   */
  static async setup(this: typeof Schema) {
    this.sql = SqlService.getInstance()

    // create/migrate tables sequentially

    // GENERATED BY DEFAULT AS IDENTITY instead of SERIAL - dev.004

    await this.migrate('TABLE SCHEMA benchmarks v1')`
      CREATE TABLE IF NOT EXISTS benchmarks (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        name varchar(64) NOT NULL,
        description text NOT NULL,
        docker_image varchar(2048) NOT NULL,
        tests integer[] NOT NULL DEFAULT ARRAY[]::integer[]
      )
    `

    await this.migrate('TABLE VALUES benchmarks v1')`
      INSERT INTO benchmarks
        (id, name, description, docker_image, tests)
      VALUES
        (1, 'Flatland 3', 'The Flatland 3 Challenge is the newest competition around the Flatland environment.', 'ghcr.io/flatland-association/fab-flatland-evaluator:latest', ARRAY[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])
      ON CONFLICT (id)
        DO NOTHING
    `

    await this.migrate('TABLE SCHEMA tests v1')`
      CREATE TABLE IF NOT EXISTS tests (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        name varchar(64) NOT NULL,
        description text NOT NULL
      )
    `

    // copied from https://flatland-association.github.io/flatland-book/challenges/flatland3/envconfig.html Round 1
    await this.migrate('TABLE VALUES tests v1')`
      INSERT INTO tests
        (id, name, description)
      VALUES
        (1, 'Test_00', '7 agents, 30x30, 2 cities, 10 seeds'),
        (2, 'Test_01', '10 agents, 30x30, 2 cities, 10 seeds'),
        (3, 'Test_02', '20 agents, 30x30, 3 cities, 10 seeds'),
        (4, 'Test_03', '50 agents, 30x35, 3 cities, 10 seeds'),
        (5, 'Test_04', '80 agents, 35x30, 5 cities, 10 seeds'),
        (6, 'Test_05', '80 agents, 45x35, 7 cities, 10 seeds'),
        (7, 'Test_06', '80 agents, 40x60, 9 cities, 10 seeds'),
        (8, 'Test_07', '80 agents, 60x40, 13 cities, 10 seeds'),
        (9, 'Test_08', '80 agents, 60x60, 17 cities, 10 seeds'),
        (10, 'Test_09', '100 agents, 80x120, 21 cities, 10 seeds'),
        (11, 'Test_10', '100 agents, 100x80, 25 cities, 10 seeds'),
        (12, 'Test_11', '200 agents, 100x100, 29 cities, 10 seeds'),
        (13, 'Test_12', '200 agents, 150x150, 33 cities, 10 seeds'),
        (14, 'Test_13', '400 agents, 150x150, 37 cities, 10 seeds'),
        (15, 'Test_14', '425 agents, 158x158, 41 cities, 10 seeds')
      ON CONFLICT (id)
        DO NOTHING
    `

    await this.migrate('TABLE SCHEMA submissions v1')`
      CREATE TABLE IF NOT EXISTS submissions (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        benchmark integer NOT NULL,
        submission_image varchar(2048) NOT NULL,
        code_repository varchar(2048),
        tests integer[] NOT NULL
      )
    `

    await this.migrate('TABLE SCHEMA submissions v2')`
      ALTER TABLE submissions
        ADD COLUMN IF NOT EXISTS submitted_at timestamp without time zone,
        ADD COLUMN IF NOT EXISTS submitted_by uuid,
        ADD COLUMN IF NOT EXISTS submitted_by_username varchar(64);
    `

    await this.migrate('TABLE SCHEMA results v1')`
      CREATE TABLE IF NOT EXISTS results (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        submission integer NOT NULL,
        created_at timestamp without time zone DEFAULT current_timestamp,
        done_at timestamp without time zone,
        success boolean,
        scores double precision[],
        results_str text,
        public boolean
      )
    `

    await this.migrate('TABLE INDEX results (submission) v1')`
      CREATE INDEX IF NOT EXISTS submission_idx ON results (submission) WITH (deduplicate_items = off)
    `
  }

  /**
   * Pretty prints what is going on and executes the attached SQL query.
   * @returns Template tag for query.
   * @see {@link SqlService.query}
   */
  private static migrate(label: string) {
    const text = `Migrating ${label}`
    return async (strings: TemplateStringsArray, ...params: string[]) => {
      this.log('busy', text)
      // assume result will always be empty and can be ignored
      await this.sql.query(strings, ...params)
      this.log(this.sql.errors ? 'error' : 'ok', text)
      if (this.sql.errors) {
        const [error] = this.sql.errors[0].message.split('\n')
        console.log(error)
      }
    }
  }

  /**
   * Outputs text with status indicator. Must always be ultimately used with
   * `'ok'` or `'error'` i.o.t. proceed (line feed).
   */
  private static log(indicate: 'busy' | 'ok' | 'error', text: string) {
    if (indicate === 'busy') {
      // while busy, don't feed line
      process.stdout.write(`${ansiStyles.blue.open}…${ansiStyles.reset.close} ${text}\r`)
    } else if (indicate === 'ok') {
      process.stdout.write(`${ansiStyles.green.open}✓${ansiStyles.reset.close} ${text}\n`)
    } else {
      process.stdout.write(`${ansiStyles.red.open}✗${ansiStyles.reset.close} ${text}\n`)
    }
  }
}
