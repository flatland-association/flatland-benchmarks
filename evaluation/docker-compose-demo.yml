services:
  postgres:
    extends:
      file: docker-compose-base.yml
      service: postgres

  redis:
    extends:
      file: docker-compose-base.yml
      service: redis

  redis-monitor:
    extends:
      file: docker-compose-base.yml
      service: redis-monitor

  rabbit:
    extends:
      file: docker-compose-base.yml
      service: rabbit

  minio:
    extends:
      file: docker-compose-base.yml
      service: minio

  minio_setup:
    extends:
      file: docker-compose-base.yml
      service: minio_setup

  orchestrator:
    extends:
      file: docker-compose-base.yml
      service: orchestrator

  orchestrator-railway:
    # https://docs.celeryq.dev/en/stable/reference/cli.html#celery-worker
    # Use --concurrency 2 to specify worker pool size: https://docs.celeryq.dev/en/stable/userguide/workers.html#concurrency
    entrypoint: [ "/bin/bash","-c" ]
    command:
      - |
        set -euxo pipefail
        cd ai4realnet_orchestrators
        python -m celery -A domain_orchestrators.railway.orchestrator worker -l info -n orchestrator@%n -Q ${BENCHMARK_ID}
    build:
      context: .
      dockerfile: Dockerfile_railway
    depends_on:
      rabbit:
        condition: service_healthy
      minio_setup:
        condition: service_completed_successfully
    volumes:
      - ${COMPUTE_WORKER_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock
    #      - ./ai4realnet_orchestrators/domain_orchestrators/railway/orchestrator.py:/app/orchestrator.py
    env_file: .env
    environment:
      # required for flyway start.sh
      - POSTGRES_HOST=${POSTGRES_HOST:-rabbit}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

      - BROKER_URL=pyamqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@${RABBITMQ_HOST}:5672//
      - BACKEND_URL=rpc://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@${RABBITMQ_HOST}:5672//
      - HOST_DIRECTORY=${PWD}
      - CLIENT_SECRET=top-secret
      - TOKEN_URL=http://keycloak:8081/realms/netzgrafikeditor/protocol/openid-connect/token
      - OAUTHLIB_INSECURE_TRANSPORT=1
    logging:
      options:
        max-size: "20m"
        max-file: "5"
    healthcheck:
      test: cd ai4realnet_orchestrators && python -m celery -A domain_orchestrators.railway.orchestrator inspect ping
    networks:
      - flatland-benchmarks

  # TODO flyway in backend container seems not to work on MacOS at least... use one or the other
  flyway:
    profiles: [ full, localbuild ]
    extends:
      file: docker-compose-base.yml
      service: flyway
    # data is not present in docker-compose-base but required for test
    volumes:
      - ../ts/backend/src/migration/schema:/flyway/sql/schema
      - ../ts/backend/src/migration/data:/flyway/sql/data

  fab-backend:
    profiles: [ full ]
    extends:
      file: docker-compose-base.yml
      service: fab-backend
    volumes:
      #      # comment out for local development
      #      - ../dist/backend/app:/usr/src/app/dist/backend/app
      #      - ../node_modules:/usr/src/app/node_modules
      #- ../ts/backend/src/migration/schema:/flyway/sql/schema
      #- ../ts/backend/src/migration/data:/flyway/sql/data
      # reverse proxy to access keycloak via localhost:8081 in backend container
      - ../deployment/backend/nginx.conf:/etc/nginx/http.d/default.conf
      - ../deployment/backend/start_reverseproxy.sh:/flyway/start.sh
    entrypoint: bash
    command:
      - /flyway/start.sh
    depends_on:
      # workaround for docker compose waithing for flyway although exited with 0 https://forums.docker.com/t/behavior-of-up-wait-changed/147699/4
      flyway:
        condition: service_completed_successfully

  fab-frontend:
    profiles: [ full ]
    extends:
      file: docker-compose-base.yml
      service: fab-frontend
    #      # comment out for local development:
    #    volumes:
    #      - ../dist/frontend/browser:/usr/share/nginx/html
    depends_on:
      # workaround for docker compose waithing for flyway although exited with 0 https://forums.docker.com/t/behavior-of-up-wait-changed/147699/4
      flyway:
        condition: service_completed_successfully

  keycloak:
    profiles: [ full ]
    build:
      context: ../deployment/keycloak
    hostname: keycloak
    # as we need to access keycloak from backend Docker container under docker internal port, we need to start Keycloak on configured port, port forwarding in Docker run is not enough
    command:
      start-dev --import-realm --http-port ${KEYCLOAK_PORT:-8081} --hostname localhost
    ports:
      - ${KEYCLOAK_PORT:-8081}:${KEYCLOAK_PORT:-8081}
    volumes:
      # TODO can we avoid copying the realm config? Download in an init container from the repo....?
      - ./keycloak/netzgrafikeditor-realm.json:/opt/keycloak/data/import/netzgrafikeditor-realm.json
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=netzgrafikeditor
    networks:
      - flatland-benchmarks
    healthcheck:
      test: [ "CMD", "bash", "-c", "curl -v --fail http://127.0.0.1:${KEYCLOAK_PORT:-8081}/realms/netzgrafikeditor/.well-known/openid-configuration" ]
      interval: 5s
      timeout: 20s
      retries: 50
networks:
  flatland-benchmarks:
