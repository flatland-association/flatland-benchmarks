on:
  push:
    branches:
      - main


name: release-please

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      tag_name: ${{ steps.release.outputs.tag_name }}
  build-frontend-image:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    name: Build FAB Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Container Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deployment/frontend/Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: |
            ghcr.io/flatland-association/fab-frontend:${{ needs.release-please.outputs.tag_name }}
  build-backend-image:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    name: Build FAB Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Container Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deployment/backend/Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: |
            ghcr.io/flatland-association/fab-backend:${{ needs.release-please.outputs.tag_name }}
          build-args: |
            FAB_VERSION=${{ needs.release-please.outputs.tag_name }}
  build-flatland-evaluator:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    name: Build Flatland 3 Evaluator
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Container Image
        uses: docker/build-push-action@v6
        with:
          context: evaluation/evaluator
          file: evaluation/evaluator/Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: |
            ghcr.io/flatland-association/fab-flatland-evaluator:${{ needs.release-please.outputs.tag_name }}

  build-flatland-compute-worker:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    name: Build Flatland 3 Compute Worker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Container Image
        uses: docker/build-push-action@v6
        with:
          context: evaluation/orchestrator
          file: evaluation/orchestrator/Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: |
            ghcr.io/flatland-association/fab-flatland-compute-worker:${{ needs.release-please.outputs.tag_name }}

  publish-fab-client-pypi:
    needs: release-please
    runs-on: ubuntu-22.04
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
      - name: Install dependencies
        run: npm ci
      - name: Re-generate swagger.json in backend build
        working-directory: ts/backend/
        run: |
          npm run build
      - name: Copy swagger.json from backend to openapi.json in client-lib
        run: |
          cp ts/backend/src/swagger/swagger.json  fab-clientlib/openapi.json
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Update version and build client lib
        working-directory: fab-clientlib
        run: |
          python -m pip install openapi-generator-cli poetry
          openapi-generator-cli generate -i openapi.json -g python -c .openapi-generator-config.json --package-name fab_clientlib -p packageVersion=${{ needs.release-please.outputs.tag_name }}
          poetry --clean build
          find dist
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: fab-clientlib/dist
      - name: Archive package
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: fab-clientlib/dist
